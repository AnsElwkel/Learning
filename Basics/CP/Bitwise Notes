x ^ (x+1) = 1     where x is even integer

(x | (1 << j))      // set j-bit

(x & ~(1 << j))     // clear jth-bit

(x ^ (1 << j))      // toggle jth-bit

(x & -x)            // get LSB (- work by two's complement)

x - (x & -x)        // subtract LSB ( know if num is power of 2 of not)

when subtract any num by 1 .. LSB is cleared and open all before bits

((x^(x-1))?/*set 0-bit to LS-bit and clear another bits*/ & x) // get LSB

Examples:
cout << (2 | (1 << 0)) << endl; // set j-bit
cout << (6 & ~(1 << 2)) << endl; // clear jth-bit
cout << (6 ^ (1 << 3)) << endl; // toggle jth-bit
cout << (6 & -6) << endl; // get LSB (- work by two's complement)
cout << 6 - (6 & -6) << endl; // subtract LSB ( know if num is power of 2 of not)
cout << ((20^19)?/*set 0-bit to LS-bit and clear another bits*/ & 20) << endl; // get LSB
