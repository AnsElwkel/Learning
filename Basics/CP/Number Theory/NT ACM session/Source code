#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
using namespace std;

const int MAX =100, MOD = 1e9+7;

ll fastPow(ll base , ll power , ll mod = LLONG_MAX){
    if(base == 0) return 0;
    ll ret = 1;
    while(power > 0){
        if(power & 1) ret = ((ret % mod) * (base % mod)) % mod;
        base= ((base % mod) * (base % mod)) % mod;
        power = (power >> 1LL);
    }

    return ret % mod;
}

ll GCD(ll a , ll b){return( a == 0 ? b :  return GCD(b % a , a)); }
ll LCM(ll a,ll b){ return (a * b) / GCD(a , b); }
ll multi(ll a, ll b , ll mod = LLONG_MAX){ return ((a%mod)*(b%mod))%mod; }
ll add(ll a, ll b , ll mod = LLONG_MAX)  { return ((a%mod)+(b%mod))%mod; }
ll sub(ll a, ll b , ll mod = LLONG_MAX)  { return ((a%mod)-(b%mod) + mod)%mod; }
ll inv(ll a, ll mod){return fastPow(a , mod - 2 , mod) ;}//IFF mod is prime

int fact[MAX+1] , invFact[MAX+1];
void pre(){
    fact[0] = 1;
    int i = 1;
    for(;i <= MAX; i++) fact[i] = multi(fact[i-1] , i , MOD);
    --i;
    invFact[i] = inv(fact[i] , MOD);
    --i;
    for(;i>-1;--i) invFact[i]=multi(invFact[i+1] , i+1 , MOD);
}
ll nPr(ll n , ll r){
    if(r > n || n < 0 || r < 0) return 0;//invalid cases
    return multi(fact[n] , invFact[n-r] ,MOD);

}
ll nCr(ll n , ll r){
    if(r > n || n < 0 || r < 0) return 0;//invalid cases
    return multi(nPr(n , r),invFact[r] , MOD);
}

vector<int>spf (MAX) ;
void preSPF () {
    iota(all(spf) , 0);
    for(int i = 2; i * i < MAX ; i++){
        if(spf[i] == i)
            for(int j = i*i ; j< MAX ; j+=i)
                spf[j] = min(spf[j] , i);
    }
}

