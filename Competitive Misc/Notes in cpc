- Number Theory notes and Template (1)
- Graph Notes and Templates (1)
- DPs code
- Probability notes and pascal triangle
-----------------------------------------------------------------------------------
//Hints
/*
 * Read statement well
 * Understand Problem ?
 * Read constraints well and try to think in edge cases
 * Reverse thinking , preCalculate
 * Perm , brute force (it & rec) , backtracking , take or leave
 * binary search (on answer) in double for loops:)
 * Lower and Upper bound
 * Two pointers and sliding window
 * facts about numbers and primes and combinatorics
 * GCD , LCM , Prefix ,Suffix and Partial
 * STLs -> deque , multiset , map , unordered , ordered set
 * Graph , DP , NT
 * */

--------------------------------------------------------------------------------------
Combinatorics Notes:
--------------------
Sum of squares of first n numbers:
n*(n+1)*(2*n+1)/6
Sum of squares of first n even numbers:
2*n*(n+1)*(2*n+1)/3
Sum of squares of first n odd numbers:
n*(2*n+1)*(2*n-1)/3
Number of ways to pick equal number of elements from
two sets : (n+m)C(m)
Sum of phi(d) for all d | n is equal to n.
Number of pairs (x, y) that satisfy x + y = n and
                                            gcd(x, y) = 1 is phi(n).

Fi = Fibonacci of i
F1^2 + F2^2 + ... + Fn^2 = Fn*Fn+1
F1 + F2 + ... Fn = Fn+2 - 1
F(x + y) = F(x) * F(y + 1) + F(x - 1) * F(y) --- F[0] =
0, F[1] = 1
Number of labelled rooted forests (n + 1)^(n-1)
Number of labeled trees with given degree sequence with
        size n
(n - 2)! / ((d1 - 1)! * (d2 - 1)! * (dn - 1)!)
Number of labeled graphs Gn = 2^(n*(n-1)/2)
Number of connected labeled graphs
        Cn = Gn - 1/n * Sum(k * nCk * Ck * Gn-k) k = [1,n-1]
Number of labeled graphs with k components
        D[n][k] = Sum(n-1Cs-1 * Cs * D[n-s][k-1]) s = [1,n]
Number of Derangements of size n F(n)
F(0) = 0
F(1) = 1
F(n) = (n-1) * (F(n-2) + F(n-1))
-------------------------------------------------------------------------------------
Graphs :-
--------

DFS:
void DFS(int s){ //Recursive algorithm
    if(vis[s]) return;
    vis[s]=1;
    //process
    for(auto i : adj[s]){
        dfs(i);
    }
}

/*
 * Application :
 * 1- Connected component
 * int cnt=0;
 * for(int i=0;i<n;i++)
 * if(!vis[i])cnt++ , dfs(i);
 *
 * 2- Flood fill
 * 3- Topological sort
 */


BFS:
//Unweighted graph   the shortest path algorithm

void BFS(int s){
    bool vis[N]{};
    vector<int> dist(N);
    queue<int> q; // node
    q.push(s); // source
    vis[s] = 1;
    dist[s] = 0;

    while(!q.empty()){
        int parent = q.front();
        for(auto child : adj[parent]){
            if(vis[child])
                continue;
            vis[child]=1;
            dist[child] = dist[parent]+1;
            q.push(child);
        }
    }
}


/*
 * Application
 * 1- check Bipartite
 */
void BFS(int s){
    vector<int> color(N,INF);
    queue<int> q;
    q.push(s); //source
    color[s] = 0;
    bool isBipartite = 1;
    while(!p.empty() and isBipartite){
        int parent = pq.front();
        for(auto child : adj[parent]){
            if(color[child] == INF){
                color[child] = 1-color[parent];
                q.push(child);
            }else if(color[child]==color[parent]){
                isBipartite = 0;
                break;
            }
        }
    }
}

Dijkstra:
// When there are weighted graphs
// Is a shortest path algorithm

void dijkstra(int s){
    bool vis[N]{};
    vector<int> dist(N,INF);
    priority_queue<pair<int , int>> pq; // {weight, node}
    pq.push({0 , s}); //source
    vis[s] = 1;

    dist[s] = 0;
    while(sz(pq)){
        auto [weight, parent] = pq.top();
        weight*=-1; // if we need this
        for(auto [child , w] : adj[parent]){
            if(vis[child])continue;
            vis[child]=1;

            if(dist[parent]+w<dist[child])
                dist[child]=dist[parent]+w;
            pq.push({-dist[child], child});
        }
    }
}
